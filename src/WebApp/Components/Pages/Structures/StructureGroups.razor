@attribute [Route($"/{Route}")]
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>@Texts.TitleStructureGroups</PageTitle>
<h3>@Texts.TitleStructureGroups</h3>

@{
    string structureGroupExplanation = Texts.StructureGroupExplanation;
    string structureExplanation = Texts.StructureExplanation;
    bool showExplanationAlert = !string.IsNullOrEmpty(structureGroupExplanation) || !string.IsNullOrEmpty(structureExplanation);
}

@if (showExplanationAlert)
{
    <div class="my-2">
        <DisplayMessage Type="DisplayMessageType.Info">
            <div class="d-inline-flex flex-column gap-2">
                <div>@structureGroupExplanation</div>
                <div>@structureExplanation</div>
            </div>
        </DisplayMessage>
    </div>
}


<div class="d-flex gap-3 align-items-center mb-4">
    <a href="@EditStructureGroup.RouteCreate" class="link-as-button d-inline-flex justify-content-center align-items-center" title="@Texts.TitleCreateStructureGroup">
        <i class="bi-plus fs-5"></i>
        <span class="mx-1">@Texts.TitleCreateStructureGroup</span>
    </a>
</div>

<div id="structure-groups">
    @foreach(var group in _model.StructureGroups)
    {
        string optionsId = $"options-{group.Id!.Value}";
        
        <div class="d-flex justify-content-between">
            <div id="group-@(group.Id!.Value)-details" class="d-flex w-100 justify-content-between">
                <span class="w-100">@group.Name</span>
                <span class="w-100">@group.Path</span>
            </div>
            <div class="dropdown">
                <button type="button"
                        title="Optionen"
                        class="all-unset cursor-pointer dropdown-focusable px-2 py-1"
                        id="@optionsId"
                        data-bs-toggle="dropdown"
                        aria-expanded="false">
                    <Ellipsis Width="25" />
                </button>
                <ul class="dropdown-menu" aria-labelledby="@optionsId">
                    <li>
                        <button type="button" id="@($"edit-structure-group-option-{group.Id!.Value}")" class="dropdown-item" @onclick="() => OnEditStructureGroupClicked(group.Id.Value)">
                            <div class="d-inline-flex align-items-center gap-1">
                                <i class="bi bi-pencil" title="@Texts.TitleEditStructureGroup" aria-hidden="true"></i>
                                @Texts.TitleEditStructureGroup
                            </div>
                        </button>
                    </li>
                    <li>
                        <button type="button" id="@($"create-structure-option-{group.Id!.Value}")" class="dropdown-item" @onclick="OnCreateStructureClicked">
                            <div class="d-inline-flex align-items-center gap-1">
                                <i class="bi bi-plus fs-5" title="@Texts.TitleCreateStructure" aria-hidden="true"></i>
                                @Texts.TitleCreateStructure
                            </div>
                        </button>
                    </li>
                </ul>
            </div>
        </div>
    }
</div>

@code {
    [Inject] public ILogger<StructureGroups>? Logger { get; set; }
    
    [Inject] public NavigationManager? NavigationManager { get; set; }

    private void OnEditStructureGroupClicked(int structureGroupId)
    {
        NavigationManager!.NavigateTo($"{EditStructureGroup.RouteEditBase}/{structureGroupId}");
    }

    private void OnCreateStructureClicked()
    {
        Logger!.LogInformation("Create Structure Option ausgewählt");
    }
}
